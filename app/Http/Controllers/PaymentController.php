<?php

namespace App\Http\Controllers;

use App\Models\Camp;
use App\Models\CampSessionSlot;
use App\Models\Order;
use App\Models\OrderItem;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Nikolag\Square\Facades\Square;

class PaymentController extends Controller
{


    public function store(Request $request)
    {

        $cartItems = session()->get("cart.slots");

        if (!$cartItems) {
            return;
        }

        // remove duplicates
        $cartItems = array_unique($cartItems);

        // get slots
        $slots = CampSessionSlot::whereIn("id", $cartItems)->get();

        // group slots by camp
        $camps = Camp::whereIn("id", $slots->pluck("campSession.camp.id"))->with("campSessions.campSessionSlots")->get();

        $camps = $camps->map(function ($camp) use ($cartItems) {
            return [
                "id" => $camp->id,
                "name" => $camp->name,
                "price" => $camp->price,
                // select camp sessions that have slots in cart
                "sessions" => $camp->campSessions->filter(function ($session) use ($cartItems) {
                    return $session->campSessionSlots->whereIn("id", $cartItems)->count();
                })->map(function ($session) use ($cartItems) {
                    return [
                        "id" => $session->id,
                        // convert date to
                        "start_date" => $session->start_date,
                        "end_date" => $session->end_date,
                        "slots" => $session->campSessionSlots->filter(function ($slot) use ($cartItems) {
                            return in_array($slot->id, $cartItems);
                        })->map(function ($slot) {
                            return [
                                "id" => $slot->id,
                                "start_time" => $slot->start_time,
                                "end_time" => $slot->end_time,
                            ];
                        }),
                    ];
                }),
            ];
        });

        if ($camps->count() == 0) {
            return;
        }


        $total_slots = $camps->sum(function ($camp) {
            return $camp["sessions"]->sum(function ($session) {
                return $session["slots"]->count();
            });
        });
        $total_price = $camps->sum(function ($camp) {
            return $camp["price"];
        });

        $total_price *= $total_slots;



        $payment =  $this->makePayment($total_price, $request->sourceId);

        if ($payment["status"] == "error") {
            return response()->json($payment, 400);
        }

        $order = $this->createOrder($total_price, $camps);

        if ($order["status"] == "error") {
            return response()->json($order, 400);
        }

        session()->forget("cart");

        return response()->json([
            "status" => "success",
            "message" => "Payment successful",
            "data" => [
                "order" => $order["data"],
            ]
        ], 200);
    }


    public function createOrder($total_price, $camps)
    {

        try {

            $order = Order::create([
                "user_id" => auth()->id(),
                "total" => $total_price,
            ]);

            foreach ($camps as $camp) {

                foreach ($camp["sessions"] as $session) {

                    foreach ($session["slots"] as $slot) {

                        OrderItem::create([
                            "order_id" => $order->id,
                            "camp_session_id" => $session["id"],
                            "camp_session_slot_id" => $slot["id"],
                            "price" => $camp["price"],
                        ]);
                    }
                }
            }

            return [
                "status" => "success",
                "message" => "Order created successfully",
                "data" => $order
            ];
        } catch (\Exception $e) {

            Log::error("PaymentController@createOrder()", [
                "message" => $e->getMessage(),
                "trace" => $e->getTraceAsString(),
            ]);


            return [
                "status" => "error",
                "message" => $e->getMessage(),
            ];
        }
    }


    public function makePayment($totalPrice, $sourceId)
    {
        try {
            $amount = $totalPrice; //Is in USD currency and is in smallest denomination (cents). ($amount = 5000 == 50 Dollars)

            // convert to cents
            $amount = $amount * 100;

            // nonce reference => https://developer.squareup.com/docs/payment-form/payment-form-walkthrough
            // single-use token (nonce) generated by the client-side javascript library
            $formNonce = $sourceId;

            $location_id = env('SQUARE_LOCATION_ID'); //id of a location from Square

            // optional, default=USD
            $currency = config("app.currency"); //available currencies => https://developer.squareup.com/reference/square/objects/Currency

            // optional
            $note = auth()->user()->name . ' has made a payment of ' . $totalPrice . ' ' . $currency;

            // // optional
            // $reference_id = '25'; //some kind of reference id to an object or resource

            $options = [
                'amount' => $amount,
                'source_id' => $formNonce,
                'location_id' => $location_id,
                'currency' => $currency,
                'note' => $note,

            ];


            $sqaure = Square::charge($options); // Simple charge

            return [
                "status" => "success",
                "message" => "Payment successful",
                "data" => $sqaure,
            ];
        } catch (\Exception $e) {

            Log::error("PaymentController@makePayment: ", [
                "message" => $e->getMessage(),
                "trace" => $e->getTraceAsString(),
            ]);

            return [
                "status" => "error",
                "message" => $e->getMessage(),
            ];
        }
    }
}
